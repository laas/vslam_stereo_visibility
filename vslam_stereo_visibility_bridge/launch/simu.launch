<!-- -*- xml -*-

     This plays back a recorded video sequence and localize the
     camera.

     The topcs needed in the bag file are:
     - /wide/(left|right)/image_raw: acquired image files
     - /wide/(left|right)/camera_info: camera calibration data
     - /plan_left_ankle: left ankle position w.r.t to world
       frame forwarded to tf by dynamic_graph_bridge
     - /joint_states: robot joint states used to compute forward
       kinematics (robot_state_publisher).
     - /dynamic_graph/base_link: base link position published by the
       dynamic_graph_bridge. Required to compute the transformation between
       the SLAM and world (i.e. control) frames.

     The last two topics are only used when control feedback
     or pose stabilization is enabled.
  -->
<launch>
  <arg name="bag_file" />
  <arg name="give_prior" default="true" />
  <arg name="control_only" default="false" />
  <arg name="disable_control" default="false" />
  <arg name="postprocess_pose" default="true" />

  <arg name="launch_prefix" default="" />

  <!-- Use the timestamps embedded in the ROS bag file -->
  <param name="use_sim_time" value="true" />

  <!-- Play the video sequence, publish the clock topic to preserve
       the original timestamps. -->
  <node pkg="rosbag" type="rosbag" name="rosbag"
	args="play --clock -k $(arg bag_file)"/>

  <!-- Record the camera trajectory. -->
  <node pkg="rosbag" type="rosbag" name="rosbag_record"
args="record -o /tmp/slam-camera_position /slam_node/camera_position /slam_node/map_frame /slam_node/map_corrected_frame /slam_node/initial_camera_position /slam_node/visual_odometry /error /error_mapPose /error_planPose /robot_pose_ekf/odom"/>

  <!-- Launch the tracking node -->
  <node pkg="vslam_stereo_visibility_bridge" type="vslam"
	name="vslam"
	cwd="node"
	launch-prefix="$(arg launch_prefix)">
    <param name="camera_prefix" value="/wide" />

    <param name="map_frame_id" value="/map" />
    <param name="world_frame_id" value="/world"/>
    <param name="localize_from_control_only" value="$(arg control_only)" />
    <param name="give_slam_prior" value="$(arg give_prior)" />
    <param name="disable_control" value="$(arg disable_control)" />
    <param name="postprocess_pose" value="$(arg postprocess_pose)" />
  </node>

  <!-- Image processing nodes. -->
  <group ns="/wide/left">
    <node pkg="image_proc" type="image_proc" name="image_proc_left" />
  </group>
  <group ns="/wide/right">
    <node pkg="image_proc" type="image_proc" name="image_proc_right" />
  </group>

  <!-- command -->
  <param name="robot_description"
	 textfile="$(find hrp2_14_description)/urdf/hrp2.urdf"
	 unless="$(arg disable_control)" />

  <node name="robot_state_publisher"
	pkg="robot_state_publisher"
	type="state_publisher"
	respawn="true"
	/>

  <group ns="dynamic_graph" unless="$(arg disable_control)">
    <node name="tf_broadcaster"
	  pkg="dynamic_graph_bridge"
	  type="tf_broadcaster"
	  respawn="true"
	  unless="$(arg disable_control)"
	  />
  </group>

  <node name="error_estimator"
	pkg="vslam_stereo_visibility_bridge"
	type="error-estimation.py"
	respawn="true"
	unless="$(arg disable_control)">
    <param name="base_link_map_frame_id" value="/left_ankle" />
    <param name="base_link_plan_frame_id" value="/plan_left_ankle" />
    <param name="map_frame_id" value="/map" />
    <param name="plan_frame_id" value="/world" />
    <param name="nullify_error_at_startup" value="true" />
  </node>

  <node name="robot_pose_ekf"
	pkg="robot_pose_ekf"
	type="robot_pose_ekf"
	respawn="true"
	unless="$(arg disable_control)">
    <param name="output_frame" value="odom"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>

    <param name="odom_used" value="false"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="true"/>

    <param name="debug" value="true"/>
    <param name="self_diagnose" value="true"/>

    <remap from="imu_data" to="imu"/>
    <remap from="vo" to="slam_node/visual_odometry"/>
  </node>
</launch>
